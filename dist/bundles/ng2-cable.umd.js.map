{"version":3,"file":"ng2-cable.umd.js","sources":["../../src/lib/broadcaster.ts","../../src/lib/ng2-cable.service.ts","../../src/lib/ng2-cable.module.ts","../../src/public-api.ts","../../src/ng2-cable.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nexport interface BroadcastEvent {\n  key: any;\n  data?: any;\n}\n\nexport class Broadcaster {\n  private _eventBus: Subject<BroadcastEvent>;\n\n  constructor() {\n    this._eventBus = new Subject<BroadcastEvent>();\n  }\n\n  broadcast(key: any, data?: any) {\n    this._eventBus.next({key, data});\n  }\n\n  on<T>(key: any): Observable<T> {\n    return this._eventBus.asObservable()\n      .pipe(\n        filter(\n          (event) => event.key === key\n        ),\n        map(\n          (event) => <T>event.data\n        )\n      )\n  }\n}\n","import { Injectable } from '@angular/core'\nimport * as ActionCable from 'actioncable';\nimport { Broadcaster } from './broadcaster';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Ng2Cable {\n  public cable: any;\n  public subscription: any;\n  public actionCable = ActionCable;\n\n  constructor(private broadcaster: Broadcaster) {\n  }\n\n  subscribe(url:string, channel:string, params={}) {\n    this.setCable(url);\n    let subscriptionParams = Object.assign({ channel: channel }, params);\n    this.subscription = this.cable.subscriptions.create(subscriptionParams, {\n      received: (data:any) => {\n        this.broadcaster.broadcast((data.action || channel), data);\n      }\n    });\n  }\n\n  setCable(url:string): void {\n    this.cable = ActionCable.createConsumer(url);\n  }\n\n  unsubscribe() {\n    this.cable.subscriptions.remove(this.subscription);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Ng2Cable } from './ng2-cable.service';\nimport { Broadcaster } from './broadcaster';\n\n@NgModule({\n  providers: [\n    Ng2Cable,\n    Broadcaster\n  ]\n})\nexport class Ng2CableModule {\n  static forRoot(): ModuleWithProviders<Ng2CableModule> {\n    return {\n      ngModule: Ng2CableModule,\n      providers: [\n        Ng2Cable,\n        Broadcaster\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng2-cable\n */\n\nexport * from './lib/ng2-cable.service';\nexport * from './lib/broadcaster';\nexport * from './lib/ng2-cable.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Subject","filter","map","ActionCable","Injectable","NgModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;QAWE;YACE,IAAI,CAAC,SAAS,GAAG,IAAIA,YAAO,EAAkB,CAAC;SAChD;QAED,+BAAS,GAAT,UAAU,GAAQ,EAAE,IAAU;YAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,GAAG,KAAA,EAAE,IAAI,MAAA,EAAC,CAAC,CAAC;SAClC;QAED,wBAAE,GAAF,UAAM,GAAQ;YACZ,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;iBACjC,IAAI,CACHC,gBAAM,CACJ,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,GAAG,KAAK,GAAG,GAAA,CAC7B,EACDC,aAAG,CACD,UAAC,KAAK,IAAQ,OAAA,KAAK,CAAC,IAAI,GAAA,CACzB,CACF,CAAA;SACJ;0BACF;KAAA;;;QClBC,kBAAoB,WAAwB;YAAxB,gBAAW,GAAX,WAAW,CAAa;YAFrC,gBAAW,GAAGC,sBAAW,CAAC;SAGhC;QAED,4BAAS,GAAT,UAAU,GAAU,EAAE,OAAc,EAAE,MAAS;YAA/C,iBAQC;YARqC,uBAAA,EAAA,WAAS;YAC7C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;YACrE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,EAAE;gBACtE,QAAQ,EAAE,UAAC,IAAQ;oBACjB,KAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC;iBAC5D;aACF,CAAC,CAAC;SACJ;QAED,2BAAQ,GAAR,UAAS,GAAU;YACjB,IAAI,CAAC,KAAK,GAAGA,sBAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SAC9C;QAED,8BAAW,GAAX;YACE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpD;;;gIAxBU,QAAQ;oIAAR,QAAQ,cAFP,MAAM;sHAEP,QAAQ;sBAHpBC,aAAU;uBAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;QCID;;QACS,sBAAO,GAAd;YACE,OAAO;gBACL,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE;oBACT,QAAQ;oBACR,WAAW;iBACZ;aACF,CAAC;SACH;;;sIATU,cAAc;uIAAd,cAAc;uIAAd,cAAc,aALd;YACT,QAAQ;YACR,WAAW;SACZ;sHAEU,cAAc;sBAN1BC,WAAQ;uBAAC;wBACR,SAAS,EAAE;4BACT,QAAQ;4BACR,WAAW;yBACZ;qBACF;;;ICTD;;;;ICAA;;;;;;;;;;;;;;"}