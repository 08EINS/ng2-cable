{"version":3,"file":"ng2-cable.js","sources":["../../src/lib/broadcaster.ts","../../src/lib/ng2-cable.service.ts","../../src/lib/ng2-cable.module.ts","../../src/public-api.ts","../../src/ng2-cable.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nexport interface BroadcastEvent {\n  key: any;\n  data?: any;\n}\n\nexport class Broadcaster {\n  private _eventBus: Subject<BroadcastEvent>;\n\n  constructor() {\n    this._eventBus = new Subject<BroadcastEvent>();\n  }\n\n  broadcast(key: any, data?: any) {\n    this._eventBus.next({key, data});\n  }\n\n  on<T>(key: any): Observable<T> {\n    return this._eventBus.asObservable()\n      .pipe(\n        filter(\n          (event) => event.key === key\n        ),\n        map(\n          (event) => <T>event.data\n        )\n      )\n  }\n}\n","import { Injectable } from '@angular/core'\nimport * as ActionCable from 'actioncable';\nimport { Broadcaster } from './broadcaster';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Ng2Cable {\n  public cable: any;\n  public subscription: any;\n  public actionCable = ActionCable;\n\n  constructor(private broadcaster: Broadcaster) {\n  }\n\n  subscribe(url:string, channel:string, params={}) {\n    this.setCable(url);\n    let subscriptionParams = Object.assign({ channel: channel }, params);\n    this.subscription = this.cable.subscriptions.create(subscriptionParams, {\n      received: (data:any) => {\n        this.broadcaster.broadcast((data.action || channel), data);\n      }\n    });\n  }\n\n  setCable(url:string): void {\n    this.cable = ActionCable.createConsumer(url);\n  }\n\n  unsubscribe() {\n    this.cable.subscriptions.remove(this.subscription);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Ng2Cable } from './ng2-cable.service';\nimport { Broadcaster } from './broadcaster';\n\n@NgModule({\n  providers: [\n    Ng2Cable,\n    Broadcaster\n  ]\n})\nexport class Ng2CableModule {\n  static forRoot(): ModuleWithProviders<Ng2CableModule> {\n    return {\n      ngModule: Ng2CableModule,\n      providers: [\n        Ng2Cable,\n        Broadcaster\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng2-cable\n */\n\nexport * from './lib/ng2-cable.service';\nexport * from './lib/broadcaster';\nexport * from './lib/ng2-cable.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;MAQa,WAAW;IAGtB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,EAAkB,CAAC;KAChD;IAED,SAAS,CAAC,GAAQ,EAAE,IAAU;QAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC;KAClC;IAED,EAAE,CAAI,GAAQ;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;aACjC,IAAI,CACH,MAAM,CACJ,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,CAC7B,EACD,GAAG,CACD,CAAC,KAAK,KAAQ,KAAK,CAAC,IAAI,CACzB,CACF,CAAA;KACJ;;;MCtBU,QAAQ;IAKnB,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAFrC,gBAAW,GAAG,WAAW,CAAC;KAGhC;IAED,SAAS,CAAC,GAAU,EAAE,OAAc,EAAE,MAAM,GAAC,EAAE;QAC7C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnB,IAAI,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,EAAE;YACtE,QAAQ,EAAE,CAAC,IAAQ;gBACjB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC;aAC5D;SACF,CAAC,CAAC;KACJ;IAED,QAAQ,CAAC,GAAU;QACjB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;KAC9C;IAED,WAAW;QACT,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACpD;;sGAxBU,QAAQ;0GAAR,QAAQ,cAFP,MAAM;4FAEP,QAAQ;kBAHpB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCIY,cAAc;IACzB,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;gBACT,QAAQ;gBACR,WAAW;aACZ;SACF,CAAC;KACH;;4GATU,cAAc;6GAAd,cAAc;6GAAd,cAAc,aALd;QACT,QAAQ;QACR,WAAW;KACZ;4FAEU,cAAc;kBAN1B,QAAQ;mBAAC;oBACR,SAAS,EAAE;wBACT,QAAQ;wBACR,WAAW;qBACZ;iBACF;;;ACTD;;;;ACAA;;;;;;"}