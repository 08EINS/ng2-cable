{"version":3,"file":"broadcaster.js","sourceRoot":"","sources":["../src/broadcaster.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAO7C;IAGE;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,EAAkB,CAAC;IACjD,CAAC;IAED,+BAAS,GAAT,UAAU,GAAQ,EAAE,IAAU;QAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,GAAG,KAAA,EAAE,IAAI,MAAA,EAAC,CAAC,CAAC;IACnC,CAAC;IAED,wBAAE,GAAF,UAAM,GAAQ;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;aACjC,IAAI,CACH,MAAM,CACJ,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,GAAG,KAAK,GAAG,EAAjB,CAAiB,CAC7B,EACD,GAAG,CACD,UAAC,KAAK,IAAK,OAAG,KAAK,CAAC,IAAI,EAAb,CAAa,CACzB,CACF,CAAA;IACL,CAAC;IACH,kBAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nexport interface BroadcastEvent {\n  key: any;\n  data?: any;\n}\n\nexport class Broadcaster {\n  private _eventBus: Subject<BroadcastEvent>;\n\n  constructor() {\n    this._eventBus = new Subject<BroadcastEvent>();\n  }\n\n  broadcast(key: any, data?: any) {\n    this._eventBus.next({key, data});\n  }\n\n  on<T>(key: any): Observable<T> {\n    return this._eventBus.asObservable()\n      .pipe(\n        filter(\n          (event) => event.key === key\n        ),\n        map(\n          (event) => <T>event.data\n        )\n      )\n  }\n}\n"]}